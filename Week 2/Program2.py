import networkx as nx
g = nx.Graph([[8, 21], [46, 56], [30, 57], [3, 42], [15, 62], [19, 50], [38, 33], [39, 32], [27, 30], [48, 44], [19, 41], [73, 66], [71, 54], [17, 25], [13, 11], [72, 33], [52, 8], [9, 0], [44, 70], [34, 9], [17, 51], [35, 37], [4, 48], [23, 2], [16, 74], [46, 59], [51, 62], [0, 67], [36, 28], [0, 53], [24, 66], [24, 35], [51, 74], [34, 10], [68, 12], [40, 31], [43, 32], [20, 36], [11, 30], [7, 63], [33, 22], [69, 5], [5, 30], [29, 58], [39, 18], [35, 64], [26, 38], [60, 38], [47, 55], [45, 55], [22, 63], [71, 67], [7, 41], [21, 38], [23, 46], [55, 71], [49, 3], [65, 68], [57, 61], [57, 6], [14, 4], [14, 58], [2, 1], [25, 20], [4, 65], [59, 14], [39, 57], [49, 38], [52, 73], [10, 40], [21, 59], [31, 4], [16, 30], [3, 43], [21, 61], [6, 7], [38, 9], [2, 65], [74, 53], [69, 60], [63, 61], [2, 58], [16, 47], [28, 17], [36, 58], [63, 47], [59, 16], [15, 69], [49, 13], [65, 8], [49, 57], [30, 4], [12, 23], [46, 45], [69, 73], [1, 32], [74, 50], [8, 59], [57, 57], [20, 19], [66, 11], [7, 12], [10, 20], [1, 16], [10, 52], [55, 15], [20, 27], [69, 9], [70, 33], [71, 34], [40, 2], [17, 56], [52, 22], [51, 49], [71, 23], [10, 44], [42, 1], [19, 42], [25, 31], [65, 64], [11, 9], [18, 26], [49, 63], [56, 54], [7, 21], [69, 48], [43, 56], [35, 58], [70, 49], [41, 56], [48, 39], [0, 16], [55, 9], [0, 68], [4, 10], [10, 63], [11, 46], [38, 46], [33, 60], [39, 9], [62, 18], [32, 45], [11, 21], [63, 24], [35, 41], [58, 60], [59, 44], [44, 58], [34, 2], [45, 8], [72, 7], [56, 28], [39, 45], [5, 26], [51, 23], [61, 20], [29, 32], [33, 31], [35, 25], [51, 65], [35, 71], [45, 18], [33, 28], [12, 57], [34, 71], [45, 21], [45, 11], [59, 52], [0, 44], [21, 39], [13, 58], [60, 0], [26, 13], [4, 16], [57, 15], [7, 37], [27, 71], [33, 19], [52, 36], [1, 47], [31, 50], [23, 68], [17, 2], [11, 42], [48, 30], [7, 16], [0, 11], [52, 38], [15, 12], [66, 6], [66, 61], [22, 25], [31, 31], [38, 37], [24, 0], [36, 13], [28, 10], [30, 17], [17, 48], [40, 17], [26, 67], [55, 19], [56, 58], [57, 53], [7, 38], [24, 8], [5, 63], [4, 42], [31, 19], [24, 64], [58, 73], [45, 64], [29, 35], [73, 1], [70, 2], [34, 40], [5, 22], [31, 20], [43, 22], [64, 33], [23, 27], [5, 49], [33, 15], [69, 34]])
#g = nx.Graph([[84, 71], [68, 28], [81, 80], [55, 25], [44, 39], [74, 75], [73, 20], [25, 18], [5, 50], [59, 91], [54, 67], [91, 29], [31, 83], [2, 83], [87, 78], [84, 97], [42, 21], [92, 85], [1, 53], [90, 22], [63, 14], [60, 23], [10, 96], [16, 40], [70, 41], [0, 16], [11, 65], [46, 36], [30, 42], [64, 32], [26, 84], [93, 51], [71, 87], [34, 19], [64, 61], [37, 16], [8, 82], [34, 3], [85, 50], [13, 69], [58, 56], [99, 8], [53, 98], [17, 12], [7, 38], [15, 42], [60, 81], [79, 48], [35, 47], [17, 4], [43, 49], [52, 86], [18, 11], [43, 9], [32, 88], [77, 45], [74, 11], [81, 51], [6, 1], [30, 29], [72, 82], [52, 58], [62, 7], [47, 97], [79, 94], [73, 58], [63, 46], [79, 68], [7, 67], [12, 24], [27, 33], [89, 45], [41, 9], [5, 88], [25, 10], [95, 39], [39, 8], [63, 24], [79, 63], [47, 25], [98, 45], [83, 73], [70, 37], [96, 8], [63, 87], [99, 31], [59, 67], [57, 66], [81, 34], [30, 90], [27, 13], [89, 66], [76, 54], [35, 51], [54, 28], [82, 32], [13, 43], [89, 15], [41, 19]])
t = nx.floyd_warshall(g) # создается такой же словарик, как и в первой программе, но применяется метод Флойда-Уоршелла,
# так как он позволяет правильно считать расстония даже с учетом сильно связанных компонент (циклов)
lis = []
for i in range(len(nx.nodes(g))): # ради разнообразия создаю список со всеми расстояниями, сортирую и беру последний элемент как максимальный
	for j in range(len(nx.nodes(g))):
		lis.append(t[i][j])
lis.sort()
diameter = int(lis[-1])
print(diameter)
# Алгоритм Флойда-Уоршелла выполняется за O(n^{3}), медленнее, чем Алгоритм Дейкстры, зато универсальнее