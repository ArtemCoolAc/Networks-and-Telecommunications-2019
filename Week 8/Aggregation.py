#!/usr/bin/env python
# coding: utf-8

import copy
connected_ports = [[0, 68], [1, 24], [2, 88], [3, 4], [4, 36], [5, 62], [6, 78], [7, 17], [8, 22], [9, 77], [10, 35], [11, 34], [12, 26], [13, 83], [14, 40], [15, 51], [16, 76], [17, 73], [18, 50], [19, 55], [20, 25], [21, 60], [22, 65], [23, 31], [24, 69], [25, 13], [26, 58], [27, 14], [28, 1], [29, 64], [30, 43], [31, 39], [32, 16], [33, 11], [34, 33], [35, 12], [36, 10], [37, 6], [38, 57], [39, 21], [40, 5], [41, 56], [42, 46], [43, 75], [44, 66], [45, 74], [46, 52], [47, 47], [48, 45], [49, 30], [50, 61], [51, 53], [52, 0], [53, 19], [54, 81], [55, 44], [56, 42], [57, 71], [58, 59], [59, 7], [60, 79], [61, 72], [62, 63], [63, 18], [64, 23], [65, 9], [66, 32], [67, 54], [68, 3], [69, 27], [70, 67], [71, 70], [72, 41], [73, 85], [74, 48], [75, 38], [76, 37], [77, 20], [78, 86], [79, 29], [80, 80], [81, 49], [82, 82], [83, 87], [84, 8], [85, 2], [86, 28], [87, 84], [88, 15]]
print(len(connected_ports))
connections_dict_AtoB = dict()
connections_dict_BtoA = dict()
#for i in range(len(connected_ports)):
    #connections_dict_AtoB[i] = list()
    #connections_dict_BtoA[i] = list()
for i in range(len(connected_ports)):
    connections_dict_AtoB[i] = connected_ports[i][1]
    connections_dict_BtoA[connected_ports[i][1]] = i
    #connections_dict_AtoB[i].append(connected_ports[i][1])
    #connections_dict_BtoA[connected_ports[i][1]].append(i)
print(connections_dict_AtoB)
print()
print(connections_dict_BtoA)

none = 0
out_of_sync = 1
in_sync = 2


exceptions_dict = {
0 : [2, 70, 75, 66, 47, 80, 54, 87, 88, 26, 79],
1 : [65, 2, 68, 70, 7, 47, 26],
2 : [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88],
3 : [65, 2, 38, 70, 74, 47, 48, 26],
4 : [2, 38, 70, 11, 47, 51, 26, 27, 29],
5 : [2, 70, 11, 34, 46, 47, 85, 55, 26, 79, 28, 61],
6 : [66, 70, 2, 77, 47, 84, 86, 57, 26],
7 : [1, 26, 2, 70, 47],
8 : [2, 70, 79, 83, 21, 55, 26, 47],
9 : [65, 2, 70, 40, 47, 87, 26],
10 : [2, 70, 43, 47, 80, 87, 26],
11 : [2, 4, 5, 70, 79, 55, 26, 47, 58],
12 : [26, 55, 2, 70, 47],
13 : [2, 34, 68, 70, 39, 45, 47, 80, 19, 26, 28],
14 : [2, 70, 43, 47, 86, 26],
15 : [2, 70, 75, 47, 16, 50, 22, 26, 63],
16 : [2, 70, 47, 17, 22, 26, 15, 29],
17 : [2, 36, 70, 47, 16, 22, 26],
18 : [2, 69, 70, 47, 19, 26, 63],
19 : [2, 68, 70, 13, 47, 18, 22, 26],
20 : [2, 70, 71, 73, 76, 45, 78, 47, 83, 52, 23, 26, 29],
21 : [64, 2, 36, 70, 8, 47, 23, 58, 60, 26],
22 : [48, 2, 70, 47, 16, 17, 19, 53, 26, 15],
23 : [2, 70, 74, 44, 47, 82, 20, 21, 26],
24 : [66, 70, 2, 47, 87, 26],
25 : [26, 75, 2, 70, 47],
26 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88],
27 : [2, 4, 70, 39, 44, 76, 47, 50, 26],
28 : [2, 5, 70, 43, 76, 13, 77, 47, 54, 26],
29 : [2, 4, 70, 47, 16, 20, 87, 84, 26],
30 : [2, 35, 70, 77, 47, 53, 26],
31 : [2, 36, 70, 39, 47, 80, 56, 26],
32 : [33, 2, 70, 43, 47, 26],
33 : [32, 34, 38, 70, 2, 47, 51, 52, 26],
34 : [33, 2, 5, 70, 13, 47, 82, 26, 38],
35 : [2, 70, 47, 83, 26, 30],
36 : [2, 70, 76, 47, 17, 21, 26, 31],
37 : [26, 2, 70, 47],
38 : [33, 2, 3, 4, 70, 34, 47, 26, 60],
39 : [65, 2, 70, 13, 66, 47, 26, 27, 60, 31],
40 : [2, 70, 9, 78, 47, 26],
41 : [2, 67, 70, 71, 47, 81, 55, 26],
42 : [2, 70, 43, 46, 47, 26],
43 : [32, 2, 70, 42, 76, 14, 47, 80, 56, 26, 28, 10],
44 : [2, 70, 45, 47, 23, 26, 27],
45 : [2, 68, 70, 74, 44, 13, 46, 47, 20, 26],
46 : [2, 5, 70, 42, 45, 47, 87, 26],
47 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88],
48 : [2, 3, 70, 47, 22, 56, 26],
49 : [2, 69, 70, 47, 81, 52, 26],
50 : [2, 27, 70, 77, 47, 87, 88, 26, 15],
51 : [33, 2, 4, 70, 47, 26, 59],
52 : [33, 2, 70, 71, 47, 49, 20, 26, 60],
53 : [2, 70, 71, 76, 47, 22, 26, 30],
54 : [0, 2, 68, 70, 47, 80, 81, 26, 28],
55 : [2, 5, 70, 8, 41, 11, 12, 47, 26, 79],
56 : [2, 43, 70, 72, 75, 47, 48, 86, 26, 59, 60, 62, 31],
57 : [2, 70, 6, 47, 80, 26],
58 : [2, 70, 11, 47, 80, 21, 26],
59 : [2, 68, 70, 47, 51, 56, 26],
60 : [2, 38, 70, 39, 47, 81, 52, 21, 86, 56, 26],
61 : [26, 2, 5, 70, 47],
62 : [2, 68, 70, 47, 80, 86, 56, 26],
63 : [2, 70, 74, 15, 18, 26, 47],
64 : [26, 21, 2, 70, 47],
65 : [1, 2, 3, 68, 70, 39, 73, 75, 76, 47, 9, 26],
66 : [0, 2, 6, 70, 39, 73, 47, 24, 88, 26],
67 : [2, 70, 41, 76, 47, 81, 26],
68 : [1, 2, 70, 65, 45, 13, 77, 47, 19, 54, 26, 59, 62],
69 : [2, 70, 47, 49, 18, 26],
70 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88],
71 : [2, 70, 41, 77, 47, 20, 53, 52, 26],
72 : [56, 26, 2, 70, 47],
73 : [65, 2, 70, 66, 47, 20, 26],
74 : [2, 3, 70, 45, 47, 23, 26, 63],
75 : [0, 65, 2, 70, 76, 47, 56, 25, 26, 15],
76 : [65, 2, 67, 36, 70, 75, 77, 47, 43, 82, 20, 53, 26, 27, 28],
77 : [2, 68, 6, 70, 71, 76, 47, 50, 88, 26, 28, 30],
78 : [2, 70, 40, 47, 20, 26],
79 : [0, 2, 5, 70, 8, 11, 47, 83, 55, 26],
80 : [0, 2, 70, 10, 43, 13, 47, 54, 57, 26, 58, 62, 31],
81 : [2, 67, 70, 41, 47, 49, 54, 26, 60],
82 : [34, 70, 76, 2, 47, 85, 23, 26],
83 : [2, 35, 70, 8, 47, 20, 26, 79],
84 : [2, 6, 70, 47, 26, 29],
85 : [2, 5, 70, 47, 82, 26],
86 : [2, 70, 6, 14, 47, 56, 26, 60, 62],
87 : [0, 2, 70, 9, 10, 46, 47, 50, 24, 26, 29],
88 : [0, 66, 70, 2, 77, 47, 50, 26] }
print(exceptions_dict)


test_ports = [[0, 0], [1, 2], [2, 3], [3, 1]]
print(len(test_ports))
test_AtoB = {0: 0, 1: 2, 2: 3, 3: 1}
test_BtoA = {0: 0, 1: 3, 2: 1, 3: 2}
print(test_AtoB)
print()
print(test_BtoA)
test_exceptionsA = dict()
test_exceptionsB = {0: [2], 1: [3], 2: [0], 3: [1]}
print(test_exceptionsB)
test_states = {0: [in_sync, -1], 1: [in_sync, -1], 2: [in_sync, -1], 3: [in_sync, -1]}


def key_management(connected_AtoB, connected_BtoA, port_states, exceptionsA, exceptionsB):
    lagA = dict()
    lagB = dict()
    operational_key = 0
    lagA_exception = copy.deepcopy(exceptionsA)
    lagB_exception = copy.deepcopy(exceptionsB)
    lagA[0] = 0
    lagB[0] = connected_AtoB[0]
    usedA = list()
    usedB = list()
    for i in range(1, len(connected_AtoB)):
        operational_key = i
        current_lagA_exception = list()
        current_lagB_exception = list()
        print(not (connected_AtoB[0] in current_lagA_exception))
        print(port_states[connected_AtoB[0]])
        for j in range(len(connected_AtoB)):
            SpisokKey = [key for key in lagB if lagB[key] == j]
            if ((not (connected_AtoB[j] in current_lagB_exception)) and (not (j in current_lagA_exception)) and port_states[connected_AtoB[j]][0] == in_sync):
                lagA[i] = j
                lagB[i] = connected_AtoB[j]
                if j in exceptionsA:
                    current_lagA_exception.append(exceptionsA[j])
                    usedA.append(j)
                if connected_AtoB[j]:
                    current_lagB_exception.append(exceptionsB[connected_AtoB[j]])
                    usedB.append(connected_AtoB[j])
            elif ((connected_AtoB[j] in current_lagB_exception) or (j in current_lagA_exception[j])):
                port_states[j][1] = out_of_sync
        if len(usedA) == len(connected_AtoB) or len(usedB) == len(connected_BtoA):
            break
    return lagA, lagB

lag1A, lag1B = key_management(test_AtoB, test_BtoA, test_states, test_exceptionsA, test_exceptionsB)
print(lag1A)
print(lag1B)